import numpy as np
import matplotlib.pyplot as plt
import random
from pathlib import Path

class FourierGenerator:
    def __init__(self, period, num_terms, weight_range=(-1, 1), offset=0, geometric_base = 1):
        """
        Initialize the Fourier Generator.
        
        :param period: The period of the periodic function.
        :param num_terms: Number of Fourier terms to include.
        :param weight_range: Tuple specifying the range for random weights (default: (-1, 1)).
        """
        self.period = period
        self.num_terms = num_terms
        self.weight_range = weight_range
        self.offset = offset
        self.geometric_base = geometric_base
        
        # Generate geometric scaling factors
        geometric_factors = geometric_base ** np.arange(num_terms)

        # Randomly initialize weights for sine and cosine terms and cap weights using the geometric sequence
        self.a = np.random.uniform(*weight_range, size=num_terms) * geometric_factors
        self.b = np.random.uniform(*weight_range, size=num_terms) * geometric_factors

    def fourier_function(self, x):
        """
        Evaluate the Fourier series at given x values.
        
        :param x: Input values to evaluate the Fourier series.
        :return: Fourier series evaluated at x.
        """
        result = np.zeros_like(x)
        for n in range(1, self.num_terms + 1):
            result += self.a[n - 1] * np.cos(2 * np.pi * n * x / self.period)
            result += self.b[n - 1] * np.sin(2 * np.pi * n * x / self.period)
        result += self.offset
        return result

    def plot(self, start=0, end=None, num_points=1000):
        """
        Plot the Fourier series over a specified range.
        
        :param start: Start of the range (default: 0).
        :param end: End of the range (default: one period).
        :param num_points: Number of points to plot for smoothness (default: 1000).
        """
        if end is None:
            end = self.period
        
        x = np.linspace(start, end, num_points)
        y = self.fourier_function(x)
        max_y = np.max(y)
        plt.figure(figsize=(8, 4))
        plt.plot(x, y, label='Fourier Series')
        plt.title('Periodic Function Generated by Fourier Series')
        plt.xlabel('x')
        plt.ylabel('f(x)')
        plt.grid(True)
        plt.legend()
        plt.ylim(0,max_y*1.25)
        plt.show()


# Define parameters
FOLDER_TO_EXPORT = 'random_fourier_series'
NUMBER_OF_POINTS_PER_CYCLE = 1000
NUMBER_OF_RUNS = 1000 # How many times to run the experiment
NUMBER_OF_CYCLES = 2
PERIOD_SEC = 1


for _ in range(NUMBER_OF_RUNS):
    FOURIER_TERMS = (lambda: random.randint(1, 30))()
    WEIGHT_RANGE_1 = (-0.05, 0.05)
    WEIGHT_RANGE_2 = (-0.05, 0.05)
    OFFSET_1 = (lambda: random.uniform(0.03, 0.13))()
    OFFSET_2 = (lambda: random.uniform(0.05, 0.15))()
    GEOMETRIC_BASE = (lambda: random.uniform(0.25,0.9))()
    PERIOD_OFFSET = (lambda: random.uniform(-PERIOD_SEC/2, PERIOD_SEC/2))()
    # Initialize two instances of FourierGenerator
    fourier_gen1 = FourierGenerator(PERIOD_SEC+PERIOD_OFFSET, FOURIER_TERMS, WEIGHT_RANGE_1, OFFSET_1, GEOMETRIC_BASE)
    fourier_gen2 = FourierGenerator(PERIOD_SEC+PERIOD_OFFSET, FOURIER_TERMS, WEIGHT_RANGE_2, OFFSET_2, GEOMETRIC_BASE)

    # Generate x values
    start = 0
    end = NUMBER_OF_CYCLES * PERIOD_SEC
    num_points = NUMBER_OF_POINTS_PER_CYCLE * NUMBER_OF_CYCLES
    x1 = np.linspace(start, end, num_points)
    x2 = np.linspace(end,  end + (end-start), num_points)

    # Compute y values for both functions
    y1 = fourier_gen1.fourier_function(x1)
    y2 = fourier_gen2.fourier_function(x2)


    # Plot both functions on the same graph
    plt.figure(figsize=(10, 6))
    plt.plot(x1, y1, label='Fourier Series 1')
    plt.plot(x2, y2, label='Fourier Series 2')
    plt.title('Two Distinct Periodic Functions Generated by Fourier Series')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.ylim(0, 0.2)

    # Save the plot as an image file
    Path(FOLDER_TO_EXPORT).mkdir(parents=True, exist_ok=True)
    plt.savefig(f'{FOLDER_TO_EXPORT}/two_fourier_series_{_}.jpg', dpi=90)
    print(f'Generated two_fourier_series_{_}.jpg')
    #plt.show()
    plt.close()