import numpy as np
import matplotlib.pyplot as plt


class FourierGenerator:
    def __init__(self, period, num_terms, weight_range=(-1, 1), offset=0, geometric_base = 1):
        """
        Initialize the Fourier Generator.
        
        :param period: The period of the periodic function.
        :param num_terms: Number of Fourier terms to include.
        :param weight_range: Tuple specifying the range for random weights (default: (-1, 1)).
        """
        self.period = period
        self.num_terms = num_terms
        self.weight_range = weight_range
        self.offset = offset
        self.geometric_base = geometric_base
        
        # Generate geometric scaling factors
        geometric_factors = geometric_base ** np.arange(num_terms)

        # Randomly initialize weights for sine and cosine terms and cap weights using the geometric sequence
        self.a = np.random.uniform(*weight_range, size=num_terms) * geometric_factors
        self.b = np.random.uniform(*weight_range, size=num_terms) * geometric_factors

    def fourier_function(self, x):
        """
        Evaluate the Fourier series at given x values.
        
        :param x: Input values to evaluate the Fourier series.
        :return: Fourier series evaluated at x.
        """
        result = np.zeros_like(x)
        for n in range(1, self.num_terms + 1):
            result += self.a[n - 1] * np.cos(2 * np.pi * n * x / self.period)
            result += self.b[n - 1] * np.sin(2 * np.pi * n * x / self.period)
        result += self.offset
        return result

    def plot(self, start=0, end=None, num_points=1000):
        """
        Plot the Fourier series over a specified range.
        
        :param start: Start of the range (default: 0).
        :param end: End of the range (default: one period).
        :param num_points: Number of points to plot for smoothness (default: 1000).
        """
        if end is None:
            end = self.period
        
        x = np.linspace(start, end, num_points)
        y = self.fourier_function(x)
        max_y = np.max(y)
        plt.figure(figsize=(8, 4))
        plt.plot(x, y, label='Fourier Series')
        plt.title('Periodic Function Generated by Fourier Series')
        plt.xlabel('x')
        plt.ylabel('f(x)')
        plt.grid(True)
        plt.legend()
        plt.ylim(0,max_y*1.25)
        plt.show()


# Example usage
NUMBER_OF_POINTS_PER_CYCLE = 1000
NUMBER_OF_CYCLES = 5

PERIOD_SEC = 2
FOURIER_TERMS = 100 # number of (sine and cosine)/2 , constant term is not included
WEIGHT_RANGE = (-0.04, 0.04)
OFFSET = 0.1
GEOMETRIC_BASE = 0.75

fourier_gen = FourierGenerator(PERIOD_SEC, FOURIER_TERMS, WEIGHT_RANGE, OFFSET, GEOMETRIC_BASE)
fourier_gen.plot(start=0, end=NUMBER_OF_CYCLES*PERIOD_SEC, num_points=NUMBER_OF_POINTS_PER_CYCLE*NUMBER_OF_CYCLES)